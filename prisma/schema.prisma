// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String          @id @default(cuid())
  name                  String?
  email                 String?         @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?         @unique
  passwordResetTokenExp DateTime?
  role                  UserRole        @default(PATIENT)
  accounts              Account[]
  sessions              Session[]
  patientProfile        PatientProfile?
  doctorProfile         DoctorProfile?
  medicalReports        MedicalReport[]
  doctorNotes           DoctorNote[]
  patientAccess         DoctorPatientAccess[] @relation("PatientAccess")
  doctorAccess          DoctorPatientAccess[] @relation("DoctorAccess")
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

model PatientProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  age             Int?
  biologicalSex   String?
  weight          Float?
  height          Float?
  bloodType       String?
  allergies       String?  @db.Text
  medications     String?  @db.Text
  medicalHistory  String?  @db.Text
  chronicIllness  String?  @db.Text
  surgeries       String?  @db.Text
  familyHistory   String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model DoctorProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty       String?
  licenseNumber   String?  @unique
  hospital        String?
  yearsExperience Int?
  bio             String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model DoctorPatientAccess {
  id        String   @id @default(cuid())
  doctorId  String
  doctor    User     @relation("DoctorAccess", fields: [doctorId], references: [id], onDelete: Cascade)
  patientId String
  patient   User     @relation("PatientAccess", fields: [patientId], references: [id], onDelete: Cascade)
  status    AccessStatus @default(PENDING)
  grantedAt DateTime @default(now())
  
  @@unique([doctorId, patientId])
}

model MedicalReport {
  id             String        @id @default(cuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  description    String?       @db.Text
  reportType     ReportType
  fileUrl        String
  fileName       String
  fileSize       Int
  mimeType       String
  uploadedAt     DateTime      @default(now())
  aiAnalysis     AIAnalysis?
  doctorNotes    DoctorNote[]
  status         ReportStatus  @default(PENDING)
}

model AIAnalysis {
  id              String        @id @default(cuid())
  reportId        String        @unique
  report          MedicalReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  analysisType    String
  findings        String        @db.Text
  patientSummary  String        @db.Text
  technicalSummary String       @db.Text
  confidence      Float?
  riskLevel       String?
  recommendations String?       @db.Text
  modelUsed       String
  analyzedAt      DateTime      @default(now())
}

model DoctorNote {
  id          String        @id @default(cuid())
  reportId    String
  report      MedicalReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  doctorId    String
  doctor      User          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  diagnosis   String?       @db.Text
  notes       String        @db.Text
  followUp    String?       @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum ReportType {
  XRAY
  CT_SCAN
  MRI
  ECG
  BLOOD_TEST
  PATHOLOGY
  OTHER
}

enum ReportStatus {
  PENDING
  ANALYZED
  REVIEWED
}

enum AccessStatus {
  PENDING
  APPROVED
  DENIED
  REVOKED
}
